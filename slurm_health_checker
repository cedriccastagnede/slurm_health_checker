#!/usr/bin/python2
'''
Created by ClusterVision <infonl@clustervision.com>
This file is part of slurm_health_checker
https://github.com/clustervision/slurm_health_checker
This file is part of slurm_health_checker.
slurm_health_checker is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
slurm_health_checker is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with slurm_health_checker.  If not, see <http://www.gnu.org/licenses/>.
'''

import os
import sys
import subprocess as sp
import yaml
import argparse
import time
import multiprocessing as mp
import logging
import re
import time
import json, urllib2

log = logging.getLogger('slurm_health_checker')


class Checker(object):

    def __init__(self, subj):

        self.log = logging.getLogger(
            'Checker PID {}'.format(os.getpid()))

        if "_check_{}".format(subj) not in dir(self):
            msg = 'No checker to check {} statement'.format(subj)
            self.log.error(msg)
            raise RuntimeError, msg

        self.check = eval("self._check_{}".format(subj))
        self.subj = subj

    def _check_cores(self, cond):
        self.log.debug('Cores checker.')

        num_cores = len(
            os.listdir('/sys/class/cpuid')
        )

        self.log.debug(
            'Found {} items in /sys/class/cpuid'.format(num_cores))

        status = num_cores == cond
        self.log.debug('Status of checking cores is {}'.format(status))

        return status

    def _check_memtotal(self, cond):
        self.log.debug('Memtotal checker.')

        try:
            with open('/proc/meminfo', 'r') as f:
                memtotal_line = f.readline()
                self.log.debug(
                    'Memtotal line in /proc/meminfo: {}'.format(
                        memtotal_line.strip()
                    )
                )

            memtotal = int(memtotal_line.split()[1])
        except Exception as exc:
            self.log.error(exc)

        status = memtotal == cond
        self.log.debug('Status of checking memtotal is {}'.format(status))

        return status

    def _check_mounts(self, cond):
        self.log.debug('Mounts checker.')
        self.log.debug('Create pool of processes.')
        less_than_ten = lambda x: x if x < 10 else 10
        process_pool = mp.pool.ThreadPool(
            processes=less_than_ten(len(cond)))

        self.log.debug('Map mount points to workers.')
        workers_return = process_pool.map(
            mount_checker_worker, cond)

        status = reduce(lambda x, y: x & y, workers_return)

        self.log.debug('Status of checking mounts is {}'.format(status))

        return status

    def _check_pci(self, cond):
        self.log.debug('PCI checker.')
        cmd = ['lspci']
        lspci_proc = sp.Popen(cmd, shell=True, stdout=sp.PIPE)
        lines = []
        self.log.debug('Fetching lscpi output')

        for line in lspci_proc.communicate():
            if line:
                lines = filter(
                    lambda x: True if x else False,
                    line.split('\n')
                )

        # lines in cond could be regexp or str
        # so compile pattern for every line

        to_match = []
        matched = []

        for cond_line in cond:
            pattern = re.compile(str(cond_line))
            to_match.append((cond_line, pattern))


        for line in lines:
            #self.log.debug('lspci line: {}'.format(line))
            for cond_line, pattern in to_match:
                #self.log.debug("Matching {}".format(cond_line))
                res = (cond_line == line) or bool(re.search(pattern, line))
                #self.log.debug("Result is {}".format(res))
                if res:
                    matched.append((cond_line, res))

        status = len(to_match) == len(matched)
        return status

    def _check_zabbix(self, cond):

        z_server = cond.pop('server')
        z_user = cond.pop('user')
        z_pass = cond.pop('password')
        z_nodename = cond.pop('node_name')
        if z_nodename[:8] == 'HOSTNAME':
            z_suffix = z_nodename[8:]
            z_nodename = os.uname()[1] + z_suffix
            self.log.debug(
                'Placeholder for hostname is found. ' +
                '"{}" will be used'.format(z_nodename)
            )

        strict = bool(cond.pop('strict'))

        severities = {
            'default': 0, 'information': 1, 'warning': 2,
            'average': 3, 'high': 4, 'disaster': 5
        }

        if not 'severity' in cond:
            return True

        try:
            severity = cond.pop('severity')
            severity = severities[severity]
        except KeyError:
            self.log.error('No such severity for zabbix check')
            return not strict

        z_severities = list(range(severity, 6))

        z_url = "http://{}/zabbix/api_jsonrpc.php".format(z_server)

        # get auth token
        j = {
            'jsonrpc': '2.0',
            'method': 'user.login',
            'auth': None,
            'id': 1,
            'params': {
                'user': z_user,
                'password': z_pass
            }
        }

        r = self._talk2zabbix(z_url, j)

        if not r:
            self.log.error(
                'Zabbix API returned wrong answer on user.login: {}'.format(str(r)))
            return not strict

        if not 'result' in r:
            self.log.error(
                'Zabbix API returned no result on user.login: {}'.format(str(r)))
            return not strict

        z_token = str(r.pop('result'))


        # get zabbix hostid
        j = {
            "jsonrpc": "2.0",
            "method": "host.get",
            "auth": z_token,
            "id": 2,
            "params": {
                "filter": {
                    "host": [
                        z_nodename,
                    ]
                }
            }
        }
        r = self._talk2zabbix(z_url, j)

        if not r:
            self.log.error(
                'Zabbix API returned wrong answer on host.get: {}'.format(str(r)))
            return not strict

        if not 'result' in r:
            self.log.error(
                'Zabbix API returned no result on host.get: {}'.format(str(r)))
            return not strict

        try:
            z_hostid = r.pop('result')[0]['hostid']
        except (KeyError,IndexError):
            self.log.error(
                'Unable to get hostid for {} in zabbix'.format(z_nodename))
            return not strict

        # get events
        j = {
            'jsonrpc': '2.0',
            'method': 'problem.get',
            'auth': z_token,
            'id': 3,
            'params': {
                'hostids': z_hostid,
                'severities': z_severities,
                'output': 'extend',
                'sortfield': ['eventid'],
                'sortorder': 'DESC',
            },
        }
        r = self._talk2zabbix(z_url, j)

        if not r:
            self.log.error(
                'Zabbix API returned wrong answer on problem.get: {}'.format(str(r)))
            return not strict

        if not 'result' in r:
            self.log.error(
                'Zabbix API returned no result on problem.get: {}'.format(str(r)))
            return not strict

        n_problems = len(r['result'])
        if n_problems > 0:
            self.log.error(
                ('One or more problems ({}) are associated with this host in Zabbix'
                .format(n_problems))
            )
            return False

        return True


    def _talk2zabbix(self, url, j):
        try:
            self.log.debug('Talking to zabbix API')
            req = urllib2.Request(url)
            req.add_header('Content-Type', 'application/json')
            r = next(urllib2.urlopen(req, json.dumps(j)))
            r = json.loads(r)
        except Exception as exc:
            log.error(exc)
            return False
        return r



def mount_checker_worker(mountpoint, timeout=10):
    cmd = 'stat -t {}'.format(mountpoint)
    log.debug('Running {}'.format(str(cmd)))

    # check if mounted

    mp_found = False
    try:
        with open('/proc/mounts', 'r') as f:
            for line in f:
                if line.split()[1] == mountpoint:
                    mp_found = True

    except Exception as exc:
        log.error(exc)
        return False
    if not mp_found:
        log.error('{} is not mounted'.format(mountpoint))
        return False

    # check availability

    stat_proc = sp.Popen(
        cmd, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    i = 0
    while True:
        if stat_proc.poll() is None:
            time.sleep(1)
        else:
            break
        i += 1
        if i > timeout:
            stat_proc.kill()
            log.error('Timeout for mountpoint {}'.format(mountpoint))
            return False

    stdout, stderr = stat_proc.communicate()

    if stat_proc.returncode != 0:
        log.error(
            'Stat for {} returned non-zero code: {}'.format(
                mountpoint, stat_proc.returncode
            )
        )
        log.error("Stdout for stat {}: {}".format(mountpoint, stdout))
        log.error("Stderr for stat {}: {}".format(mountpoint, stderr))
        return False

    log.debug("Stdout for stat {}: {}".format(mountpoint, stdout))
    log.debug("Stderr for stat {}: {}".format(mountpoint, stderr))

    log.debug('Successfully stat on {}'.format(mountpoint))
    return True


def checker_worker(elem):
    log.debug('Checker PID {} with arguments {}'.format(os.getpid(), elem))
    subj, cond = elem
    c = Checker(subj)
    res = c.check(cond)
    return res


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="""
        Check if YML definition of the node matches node configuration
        """
    )

    parser.add_argument("--nodedef", "-d", type=str, required=True,
        help="YML file defines node")

    parser.add_argument("--processes", "-p", type=int, default=0,
        help="Number of proccesses work simultaneously")

    parser.add_argument("--verbose", "-v", action="store_const",
        dest="loglevel", const=logging.DEBUG, default=logging.INFO,
        help="Debug output")

    args = parser.parse_args()
    return args


def main(arguments):
    # TODO check file permissions
    log.debug('Open YAML file.')
    with open(arguments.nodedef, 'r') as stream:
        try:
            log.debug('Reading YAML file.')
            nodedef_dict = yaml.load(stream)
        except yaml.YAMLError as exc:
            log.debug('Error occured during reading YAML file.')
            log.error(exc)
            return False

    log.debug('Create pool of processes.')
    process_pool = mp.Pool(processes=arguments.processes or None)

    log.debug('Map items to workers.')
    workers_return = process_pool.map(
        checker_worker, nodedef_dict.items())

    return reduce(lambda x, y: x & y, workers_return)


if __name__ == "__main__":
    arguments = parse_arguments()

    logging.basicConfig(level=arguments.loglevel)
    log = logging.getLogger('slurm_health_checker')
    sys.exit(not main(arguments))

